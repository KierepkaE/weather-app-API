{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","placeholder","value","onChange","change","Result","_props$weather","weather","error","city","sunrise","sunset","temp","pressure","wind","date","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","APIkey","App","state","handleInput","e","_this","setState","target","handleSubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","name","sys","main","speed","catch","prevProps","prevState","_this2","this","length","components_Form","click","components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dab3175.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = props => {\n  return (\n    <form>\n      <input\n        type=\"text\"\n        placeholder=\"city\"\n        value={props.value}\n        onChange={props.change}\n      />\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Result = props => {\n  const {\n    error,\n    city,\n    sunrise,\n    sunset,\n    temp,\n    pressure,\n    wind,\n    date\n  } = props.weather;\n\n  let content = null;\n\n  if (!error && city) {\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n\n    content = (\n      <>\n        <h1>Result for city : {city}</h1>\n        <div>Results for date: {date}</div>\n        <div>Temperature: {temp} &deg;C</div>\n        <div>Sunset: {sunsetTime}</div>\n        <div>Sunrise: {sunriseTime}</div>\n        <div>Pressure: {pressure} hPa</div>\n        <div>Wind speed: {wind} m/s</div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"result\">\n      {error ? `We have no information about ${city}` : content}\n    </div>\n  );\n};\n\nexport default Result;\n\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport \"./App.css\";\n\n// API key\nconst APIkey = \"23197c1ec38d16abd609d1570f3bb2d8\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    error: false\n  };\n\n  handleInput = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n      this.state.value\n    }&APPID=${APIkey}&units=metric`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\" upss something went wrong. . . \");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString();\n        this.setState(state => ({\n          date: time,\n          city: data.name,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          error: false\n        }));\n      })\n      .catch(error => {\n        this.setState(state => ({\n          error: true,\n          city: state.value\n        }));\n      });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length < 2) return;\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&APPID=${APIkey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\" upss something went wrong. . . \");\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString();\n          this.setState(state => ({\n            date: time,\n            city: data.name,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            error: false\n          }));\n        })\n        .catch(error => {\n          this.setState(state => ({\n            error: true,\n            city: state.value\n          }));\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInput}\n          click={this.handleSubmit}\n        />\n        <Result error={this.state.error} weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}